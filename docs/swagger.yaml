basePath: /
definitions:
  model.Response:
    properties:
      data:
        type: object
      message:
        type: string
      status:
        type: integer
    type: object
  req.PasswordSubmit:
    properties:
      confirm:
        type: string
      password:
        type: string
    required:
    - confirm
    - password
    type: object
  req.ReqBookmark:
    properties:
      post:
        type: string
    required:
    - post
    type: object
  req.ReqEmail:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  req.ReqSignIn:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  req.ReqSignUp:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  req.ReqUpdateUser:
    properties:
      confirm:
        type: string
      full_name:
        type: string
      password:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Nền tảng tổng hợp kiến thức cho developer
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: DevRead API
  version: "1.0"
paths:
  /posts:
    get:
      consumes:
      - application/json
      parameters:
      - description: tag of posts
        in: query
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
      summary: Search post by tag
      tags:
      - post-service
  /trend:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
      summary: Get all posts trending
      tags:
      - post-service
  /user/bookmark/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqBookmark'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - jwt: []
      summary: Add bookmark
      tags:
      - bookmark-service
  /user/bookmark/delete:
    delete:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqBookmark'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - jwt: []
      summary: Delete bookmark
      tags:
      - bookmark-service
  /user/bookmark/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - jwt: []
      summary: Get list bookmark
      tags:
      - bookmark-service
  /user/password/forgot:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqEmail'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
      summary: Forgot password
      tags:
      - user-service
  /user/password/reset:
    put:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.PasswordSubmit'
      - description: token reset password
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - token-reset-password: []
      summary: Reset password
      tags:
      - user-service
  /user/profile:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - jwt: []
      summary: Get user profile
      tags:
      - profile-service
  /user/profile/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqUpdateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - jwt: []
      summary: Update user profile
      tags:
      - profile-service
  /user/sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqSignIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Response'
      summary: Sign in to access your account
      tags:
      - user-service
  /user/sign-up:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.ReqSignUp'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/model.Response'
      summary: Create new account
      tags:
      - user-service
  /user/verify:
    post:
      consumes:
      - application/json
      parameters:
      - description: user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.PasswordSubmit'
      - description: token verify email
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.Response'
      security:
      - token-verify-account: []
      summary: Verify email
      tags:
      - user-service
securityDefinitions:
  jwt:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
